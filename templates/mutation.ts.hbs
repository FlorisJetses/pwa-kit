/*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import {ApiClients, ApiMethod, Argument, CacheUpdateGetter, DataType, MergedOptions} from '../types'
import {useMutation} from '../useMutation'
import {UseMutationResult} from '@tanstack/react-query'
import {NotImplementedError} from '../utils'
import useCommerceApi from '../useCommerceApi'
import {cacheUpdateMatrix} from './cache'

{{!~-- Add aliases to @root for brevity/clarity --~}}
{{~ assign 'clientInstance' name.lowerCamelCase ~}}
{{~ assign 'clientClass' name.upperCamelCase ~}}

type Client = ApiClients['{{@root.clientInstance}}']

/**
 * Mutations available for {{@root.name.original}}
 * @group {{@root.clientClass}}
 * @category Mutation
 * @enum
 */
export const {{@root.clientClass}}Mutations = {
  {{~#each model.encodes.endPoints}}{{#each operations}}{{#if (isMutation @root.clientClass this)}}
  /**
   * {{{formatForTsDoc description}}}
   * @returns A TanStack Query mutation hook for interacting with the {{@root.name.original}} `{{name}}` endpoint.
   * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/{{@root.name.kebabCase}}?meta={{name~}} | Salesforce Developer Center} for more information about the API endpoint.
   * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/{{lowercase @root.clientInstance}}.{{lowercase @root.clientInstance}}-1.html#{{lowercase (getValue name)}} | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
   * @see {@link https://tanstack.com/query/latest/docs/react/reference/useMutation | TanStack Query `useMutation` reference} for more information about the return value.
   */
  {{capitalize (getValue name)}}: '{{name}}',
  {{~/if}}{{/each}}{{/each}}
} as const

/** Mutation for {{@root.name.original}}. */
export type {{@root.clientClass}}Mutation = typeof {{@root.clientClass}}Mutations[keyof typeof {{@root.clientClass}}Mutations]

export function use{{@root.clientClass}}Mutation<Mutation extends {{@root.clientClass}}Mutation>(
    mutation: Mutation
): UseMutationResult<DataType<Client[Mutation]>, unknown, Argument<Client[Mutation]>> {
    const getCacheUpdates = cacheUpdateMatrix[mutation]
    // TODO: Remove this check when all mutations are implemented.
    if (!getCacheUpdates) throw new NotImplementedError(`The '${mutation}' mutation`)

    // The `Options` and `Data` types for each mutation are similar, but distinct, and the union
    // type generated from `Client[Mutation]` seems to be too complex for TypeScript to handle.
    // I'm not sure if there's a way to avoid the type assertions in here for the methods that
    // use them. However, I'm fairly confident that they are safe to do, as they seem to be simply
    // re-asserting what we already have.
    const { {{~@root.clientInstance}}: client} = useCommerceApi()
    type Options = Argument<Client[Mutation]>
    type Data = DataType<Client[Mutation]>
    return useMutation({
        client,
        method: (opts: Options) => (client[mutation] as ApiMethod<Options, Data>)(opts),
        getCacheUpdates: getCacheUpdates as CacheUpdateGetter<MergedOptions<Client, Options>, Data>
    })
}